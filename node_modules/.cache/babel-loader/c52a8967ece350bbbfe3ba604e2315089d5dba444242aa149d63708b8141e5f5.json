{"ast":null,"code":"import{useState,useEffect}from'react';const useEventManager=()=>{const[events,setEvents]=useState([]);useEffect(()=>{// 컴포넌트가 마운트될 때 로컬 스토리지에서 저장된 이벤트를 불러옵니다.\nconst storedEvents=JSON.parse(localStorage.getItem('events'));if(storedEvents){setEvents(storedEvents);}},[]);// 컴포넌트가 마운트될 때 한 번만 호출\nuseEffect(()=>{// events 배열이 업데이트될 때마다 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\nlocalStorage.setItem('events',JSON.stringify(events));},[events]);// events 배열이 업데이트될 때마다 호출\nconst addEvent=(date,eventTitle)=>{// 새로운 이벤트를 추가합니다.\nconst newEvents={...events};// 이벤트 배열에 새로운 이벤트를 추가합니다.\nif(!newEvents[date]){newEvents[date]=[];}newEvents[date].push(eventTitle);console.log(newEvents);setEvents(newEvents);// 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\nlocalStorage.setItem('events',JSON.stringify(newEvents));};const deleteEvent=(date,index)=>{// 이벤트를 삭제합니다.\nconst newEvents={...events};newEvents[date]=newEvents[date].filter((_,i)=>i!==index);if(newEvents[date].length===0){delete newEvents[date];}setEvents(newEvents);// 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\nlocalStorage.setItem('events',JSON.stringify(newEvents));};const editEvent=(date,index,newTitle)=>{// 이벤트를 수정합니다.\nconst newEvents={...events};newEvents[date][index]=newTitle;setEvents(newEvents);// 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\nlocalStorage.setItem('events',JSON.stringify(newEvents));};return{events,addEvent,deleteEvent,editEvent};};export default useEventManager;","map":{"version":3,"names":["useState","useEffect","useEventManager","events","setEvents","storedEvents","JSON","parse","localStorage","getItem","setItem","stringify","addEvent","date","eventTitle","newEvents","push","console","log","deleteEvent","index","filter","_","i","length","editEvent","newTitle"],"sources":["/Users/orcor/react/careplus/src/resource/EventManager.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useEventManager = () => {\n  const [events, setEvents] = useState([]);\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 로컬 스토리지에서 저장된 이벤트를 불러옵니다.\n    const storedEvents = JSON.parse(localStorage.getItem('events'));\n    if (storedEvents) {\n      setEvents(storedEvents);\n    }\n  }, []); // 컴포넌트가 마운트될 때 한 번만 호출\n\n  useEffect(() => {\n    // events 배열이 업데이트될 때마다 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(events));\n  }, [events]); // events 배열이 업데이트될 때마다 호출\n\n  const addEvent = (date, eventTitle) => {\n    // 새로운 이벤트를 추가합니다.\n    const newEvents = { ...events }; // 이벤트 배열에 새로운 이벤트를 추가합니다.\n    if (!newEvents[date]) {\n      newEvents[date] = [];\n    }\n    newEvents[date].push(eventTitle);\n    console.log(newEvents)\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n\n  const deleteEvent = (date, index) => {\n    // 이벤트를 삭제합니다.\n    const newEvents = { ...events };\n    newEvents[date] = newEvents[date].filter((_, i) => i !== index);\n    if (newEvents[date].length === 0) {\n      delete newEvents[date];\n    }\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n\n  const editEvent = (date, index, newTitle) => {\n    // 이벤트를 수정합니다.\n    const newEvents = { ...events };\n    newEvents[date][index] = newTitle;\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n\n  return {\n    events,\n    addEvent,\n    deleteEvent,\n    editEvent\n  };\n};\n\nexport default useEventManager;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE3C,KAAM,CAAAC,eAAe,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAACC,MAAM,CAAEC,SAAS,CAAC,CAAGJ,QAAQ,CAAC,EAAE,CAAC,CAExCC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAI,YAAY,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAC/D,GAAIJ,YAAY,CAAE,CAChBD,SAAS,CAACC,YAAY,CAAC,CACzB,CACF,CAAC,CAAE,EAAE,CAAC,CAAE;AAERJ,SAAS,CAAC,IAAM,CACd;AACAO,YAAY,CAACE,OAAO,CAAC,QAAQ,CAAEJ,IAAI,CAACK,SAAS,CAACR,MAAM,CAAC,CAAC,CACxD,CAAC,CAAE,CAACA,MAAM,CAAC,CAAC,CAAE;AAEd,KAAM,CAAAS,QAAQ,CAAGA,CAACC,IAAI,CAAEC,UAAU,GAAK,CACrC;AACA,KAAM,CAAAC,SAAS,CAAG,CAAE,GAAGZ,MAAO,CAAC,CAAE;AACjC,GAAI,CAACY,SAAS,CAACF,IAAI,CAAC,CAAE,CACpBE,SAAS,CAACF,IAAI,CAAC,CAAG,EAAE,CACtB,CACAE,SAAS,CAACF,IAAI,CAAC,CAACG,IAAI,CAACF,UAAU,CAAC,CAChCG,OAAO,CAACC,GAAG,CAACH,SAAS,CAAC,CACtBX,SAAS,CAACW,SAAS,CAAC,CACpB;AACAP,YAAY,CAACE,OAAO,CAAC,QAAQ,CAAEJ,IAAI,CAACK,SAAS,CAACI,SAAS,CAAC,CAAC,CAC3D,CAAC,CAED,KAAM,CAAAI,WAAW,CAAGA,CAACN,IAAI,CAAEO,KAAK,GAAK,CACnC;AACA,KAAM,CAAAL,SAAS,CAAG,CAAE,GAAGZ,MAAO,CAAC,CAC/BY,SAAS,CAACF,IAAI,CAAC,CAAGE,SAAS,CAACF,IAAI,CAAC,CAACQ,MAAM,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAKA,CAAC,GAAKH,KAAK,CAAC,CAC/D,GAAIL,SAAS,CAACF,IAAI,CAAC,CAACW,MAAM,GAAK,CAAC,CAAE,CAChC,MAAO,CAAAT,SAAS,CAACF,IAAI,CAAC,CACxB,CACAT,SAAS,CAACW,SAAS,CAAC,CACpB;AACAP,YAAY,CAACE,OAAO,CAAC,QAAQ,CAAEJ,IAAI,CAACK,SAAS,CAACI,SAAS,CAAC,CAAC,CAC3D,CAAC,CAED,KAAM,CAAAU,SAAS,CAAGA,CAACZ,IAAI,CAAEO,KAAK,CAAEM,QAAQ,GAAK,CAC3C;AACA,KAAM,CAAAX,SAAS,CAAG,CAAE,GAAGZ,MAAO,CAAC,CAC/BY,SAAS,CAACF,IAAI,CAAC,CAACO,KAAK,CAAC,CAAGM,QAAQ,CACjCtB,SAAS,CAACW,SAAS,CAAC,CACpB;AACAP,YAAY,CAACE,OAAO,CAAC,QAAQ,CAAEJ,IAAI,CAACK,SAAS,CAACI,SAAS,CAAC,CAAC,CAC3D,CAAC,CAED,MAAO,CACLZ,MAAM,CACNS,QAAQ,CACRO,WAAW,CACXM,SACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAvB,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}