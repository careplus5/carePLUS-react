{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useEventManager = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 로컬 스토리지에서 저장된 이벤트를 불러옵니다.\n    const storedEvents = JSON.parse(localStorage.getItem('events'));\n    if (storedEvents) {\n      setEvents(storedEvents);\n    }\n  }, []); // 컴포넌트가 마운트될 때 한 번만 호출\n\n  const addEvent = (date, eventTitle) => {\n    // 새로운 이벤트를 추가합니다.\n    const newEvents = {\n      ...events\n    }; // 이벤트 배열에 새로운 이벤트를 추가합니다.\n    if (!newEvents[date]) {\n      newEvents[date] = [];\n    }\n    newEvents[date].push(eventTitle);\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const deleteEvent = (date, index) => {\n    // 이벤트를 삭제합니다.\n    const newEvents = {\n      ...events\n    };\n    newEvents[date] = newEvents[date].filter((_, i) => i !== index);\n    if (newEvents[date].length === 0) {\n      delete newEvents[date];\n    }\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  const editEvent = (date, index, newTitle) => {\n    // 이벤트를 수정합니다.\n    const newEvents = {\n      ...events\n    };\n    newEvents[date][index] = newTitle;\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n  return {\n    events,\n    addEvent,\n    deleteEvent,\n    editEvent\n  };\n};\n_s(useEventManager, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\nexport default useEventManager;","map":{"version":3,"names":["useState","useEffect","useEventManager","_s","events","setEvents","storedEvents","JSON","parse","localStorage","getItem","addEvent","date","eventTitle","newEvents","push","setItem","stringify","deleteEvent","index","filter","_","i","length","editEvent","newTitle"],"sources":["/Users/orcor/react/careplus/src/resource/EventManager.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nconst useEventManager = () => {\n  const [events, setEvents] = useState([]);\n\n   useEffect(() => {\n    // 컴포넌트가 마운트될 때 로컬 스토리지에서 저장된 이벤트를 불러옵니다.\n    const storedEvents = JSON.parse(localStorage.getItem('events'));\n    if (storedEvents) {\n      setEvents(storedEvents);\n    }\n  }, []); // 컴포넌트가 마운트될 때 한 번만 호출\n\n\n  const addEvent = (date, eventTitle) => {\n    // 새로운 이벤트를 추가합니다.\n    const newEvents = { ...events }; // 이벤트 배열에 새로운 이벤트를 추가합니다.\n    if (!newEvents[date]) {\n      newEvents[date] = [];\n    }\n    newEvents[date].push(eventTitle);\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n\n  const deleteEvent = (date, index) => {\n    // 이벤트를 삭제합니다.\n    const newEvents = { ...events };\n    newEvents[date] = newEvents[date].filter((_, i) => i !== index);\n    if (newEvents[date].length === 0) {\n      delete newEvents[date];\n    }\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n\n  const editEvent = (date, index, newTitle) => {\n    // 이벤트를 수정합니다.\n    const newEvents = { ...events };\n    newEvents[date][index] = newTitle;\n    setEvents(newEvents);\n    // 로컬 스토리지에 업데이트된 이벤트를 저장합니다.\n    localStorage.setItem('events', JSON.stringify(newEvents));\n  };\n\n  return {\n    events,\n    addEvent,\n    deleteEvent,\n    editEvent\n  };\n};\n\nexport default useEventManager;\n\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAEvCC,SAAS,CAAC,MAAM;IACf;IACA,MAAMK,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/D,IAAIJ,YAAY,EAAE;MAChBD,SAAS,CAACC,YAAY,CAAC;IACzB;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAGR,MAAMK,QAAQ,GAAGA,CAACC,IAAI,EAAEC,UAAU,KAAK;IACrC;IACA,MAAMC,SAAS,GAAG;MAAE,GAAGV;IAAO,CAAC,CAAC,CAAC;IACjC,IAAI,CAACU,SAAS,CAACF,IAAI,CAAC,EAAE;MACpBE,SAAS,CAACF,IAAI,CAAC,GAAG,EAAE;IACtB;IACAE,SAAS,CAACF,IAAI,CAAC,CAACG,IAAI,CAACF,UAAU,CAAC;IAChCR,SAAS,CAACS,SAAS,CAAC;IACpB;IACAL,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAET,IAAI,CAACU,SAAS,CAACH,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMI,WAAW,GAAGA,CAACN,IAAI,EAAEO,KAAK,KAAK;IACnC;IACA,MAAML,SAAS,GAAG;MAAE,GAAGV;IAAO,CAAC;IAC/BU,SAAS,CAACF,IAAI,CAAC,GAAGE,SAAS,CAACF,IAAI,CAAC,CAACQ,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK,CAAC;IAC/D,IAAIL,SAAS,CAACF,IAAI,CAAC,CAACW,MAAM,KAAK,CAAC,EAAE;MAChC,OAAOT,SAAS,CAACF,IAAI,CAAC;IACxB;IACAP,SAAS,CAACS,SAAS,CAAC;IACpB;IACAL,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAET,IAAI,CAACU,SAAS,CAACH,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMU,SAAS,GAAGA,CAACZ,IAAI,EAAEO,KAAK,EAAEM,QAAQ,KAAK;IAC3C;IACA,MAAMX,SAAS,GAAG;MAAE,GAAGV;IAAO,CAAC;IAC/BU,SAAS,CAACF,IAAI,CAAC,CAACO,KAAK,CAAC,GAAGM,QAAQ;IACjCpB,SAAS,CAACS,SAAS,CAAC;IACpB;IACAL,YAAY,CAACO,OAAO,CAAC,QAAQ,EAAET,IAAI,CAACU,SAAS,CAACH,SAAS,CAAC,CAAC;EAC3D,CAAC;EAED,OAAO;IACLV,MAAM;IACNO,QAAQ;IACRO,WAAW;IACXM;EACF,CAAC;AACH,CAAC;AAACrB,EAAA,CAnDID,eAAe;AAqDrB,eAAeA,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}