{"ast":null,"code":"import { configureStore } from '@reduxjs/toolkit';\nimport reducer from \"./reducer\";\n// 상태를 세션에 저장하기 위한 유틸\nimport storageSession from 'redux-persist/lib/storage/session';\n// 리듀서를 감싸서 상태를 지속 가능하게 만듦\nimport { persistReducer } from 'redux-persist';\n\n// 리덕스 스토어: 애플리케이션의 모든 상태(state)를 포함하고 관리하는 객체\n// 상태 관리, 액션 처리, 상태 변화에 따라 업데이트시켜 주는 역할\n// 단일 스토어 원칙이기 때문에 앱의 전역 상태를 중앙 집중식으로 관리\n\n// redux의 createStore를 통해 스토어 생성, 파라미터로 리듀서(reducer) 초기 상태(initial State) 미들웨어(MiddleWare) 등을 받을 수 있음\n\n// persistConfig 객체 정의, 상태를 어떻게 저장할지 구성\nconst persistConfig = {\n  // 상태 저장의 루트 키 정의\n  key: 'root',\n  // 상태를 세션 스토리지에 저장하도록 저장소 지정\n  storage: storageSession\n};\n\n// 리듀서의 상태가 지속성 있게 만듦\nconst persistedReducer = persistReducer(persistConfig, reducer);\n\n// configureStore 함수를 사용해 Redux 스토어 생성\nconst store = configureStore(\n// 스토어에서 사용할 리듀서 설정\n{\n  reducer: {\n    persistedReducer\n  },\n  // 미들웨어 설정 (기본 미들웨어, 직렬화 활성화)\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: false\n  })\n});\nexport default store;","map":{"version":3,"names":["configureStore","reducer","storageSession","persistReducer","persistConfig","key","storage","persistedReducer","store","middleware","getDefaultMiddleware","serializableCheck"],"sources":["/Users/orcor/react/careplus/src/store.js"],"sourcesContent":["import {configureStore} from '@reduxjs/toolkit';\nimport reducer from\"./reducer\";\n// 상태를 세션에 저장하기 위한 유틸\nimport storageSession from 'redux-persist/lib/storage/session';\n// 리듀서를 감싸서 상태를 지속 가능하게 만듦\nimport {persistReducer} from 'redux-persist';\n\n// 리덕스 스토어: 애플리케이션의 모든 상태(state)를 포함하고 관리하는 객체\n// 상태 관리, 액션 처리, 상태 변화에 따라 업데이트시켜 주는 역할\n// 단일 스토어 원칙이기 때문에 앱의 전역 상태를 중앙 집중식으로 관리\n\n// redux의 createStore를 통해 스토어 생성, 파라미터로 리듀서(reducer) 초기 상태(initial State) 미들웨어(MiddleWare) 등을 받을 수 있음\n\n// persistConfig 객체 정의, 상태를 어떻게 저장할지 구성\nconst persistConfig = {\n    // 상태 저장의 루트 키 정의\n    key:'root',\n    // 상태를 세션 스토리지에 저장하도록 저장소 지정\n    storage: storageSession\n}\n\n// 리듀서의 상태가 지속성 있게 만듦\nconst persistedReducer = persistReducer(persistConfig,reducer);\n\n// configureStore 함수를 사용해 Redux 스토어 생성\nconst store = configureStore(\n    // 스토어에서 사용할 리듀서 설정\n    {reducer:{persistedReducer},\n    // 미들웨어 설정 (기본 미들웨어, 직렬화 활성화)\n    middleware:(getDefaultMiddleware=>getDefaultMiddleware({serializableCheck:false}))});\n\nexport default store;"],"mappings":"AAAA,SAAQA,cAAc,QAAO,kBAAkB;AAC/C,OAAOC,OAAO,MAAK,WAAW;AAC9B;AACA,OAAOC,cAAc,MAAM,mCAAmC;AAC9D;AACA,SAAQC,cAAc,QAAO,eAAe;;AAE5C;AACA;AACA;;AAEA;;AAEA;AACA,MAAMC,aAAa,GAAG;EAClB;EACAC,GAAG,EAAC,MAAM;EACV;EACAC,OAAO,EAAEJ;AACb,CAAC;;AAED;AACA,MAAMK,gBAAgB,GAAGJ,cAAc,CAACC,aAAa,EAACH,OAAO,CAAC;;AAE9D;AACA,MAAMO,KAAK,GAAGR,cAAc;AACxB;AACA;EAACC,OAAO,EAAC;IAACM;EAAgB,CAAC;EAC3B;EACAE,UAAU,EAAEC,oBAAoB,IAAEA,oBAAoB,CAAC;IAACC,iBAAiB,EAAC;EAAK,CAAC;AAAE,CAAC,CAAC;AAExF,eAAeH,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}